/**
 * Config: Mixins
 * -----------------------------------------------------------------------------
 * Global and reusable utility functions to reduce common styling.
 *
 */

/**
 * Outputs list of transition properties.
 *
 * Accepts:
 * - $transitions: {String} List of transition properties to set
 *
 * Usage:
 * .selector {
 *   @include transition(width, height 0.5s ease-in);
 * }
 */
@mixin transition($transitions...) {
  $output: ();

  @each $transition in $transitions {
    $output: append($output, get-transition-properties($transition), comma);
  }
  transition: $output;
}

/**
   * Forces an element to self-clear its children.
   *
   * Usage:
   * .selector {
   *   @include clearfix;
   * }
   */
@mixin clearfix() {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
  // stylelint-disable-next-line
  *zoom: 1;
}

/**
   * Hide element but make it accessible to screen readers.
   *
   * Usage:
   * .selector {
   *   @include visually-hidden;
   * }
   */
@mixin visually-hidden() {
  border: 0;
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/**
   * Reverse the properties applied by @mixin visually-hidden.
   *
   * Accepts:
   * - $position: {String} Positioning method for element
   *
   * Usage:
   * .selector {
   *   @include visually-shown(relative);
   * }
   */
@mixin visually-shown($position: inherit) {
  clip: auto;
  clip-path: unset;
  height: auto;
  margin: 0;
  overflow: auto;
  // stylelint-disable-next-line
  position: $position !important;
  width: auto;
}

/**
 * Maintains a specified aspect ratio.

 * Usage:
 * div  {
 *   @include aspect-ratio(16, 9);
 * }
 */
 @mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
    width: 100%;
  }

  > .content {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }
}

/**
 * Centers an element vertical and/or horizontally.

 * Usage:
 * div  {
 *   @include centerer($horizontal: true, $vertical: true);
 * }
 */
 @mixin centerer($horizontal: true, $vertical: true, $position: absolute) {

  @if ($horizontal and $vertical) {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
  position: $position;
}

/**
 * Forces an element to self-clear its children.
 *
 * Usage:
 * .selector {
 *   @include clearfix;
 * }
 */
 @mixin clearfix() {
  // stylelint-disable-next-line
  *zoom: 1;

  &::after {
    clear: both;
    content: '';
    display: table;
  }
}