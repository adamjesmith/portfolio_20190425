/**
 * Config: Grid
 * -----------------------------------------------------------------------------
 * Primary grid system based on materialize.css
 * - https://sass-mq.github.io/sass-mq
 *
 * Why we use use em values for media queries
 * https://zellwk.com/blog/media-query-units/
 */
 
 // Import sass-mq
@import '~sass-mq';

$mq-breakpoints: (
  tiny: 320px,
  small: 576px,
  medium: 768px,
  large: 1024px,
  wide: 1360px
);

$NUM_COLS: 12 !default;
$GUTTER_WIDTH: 1.5rem !default;
$ELEMENT_TOP_MARGIN: ($GUTTER_WIDTH / 3) !default;
$ELEMENT_BOTTOM_MARGIN: (($GUTTER_WIDTH * 2) / 3) !default;

@mixin reset-offset {
  left: auto;
  margin-left: auto;
  right: auto;
}

@mixin grid-classes($size, $i, $perc) {
  &.offset-#{$size}#{$i} {
    margin-left: $perc;
  }

  &.pull-#{$size}#{$i} {
    right: $perc;
  }

  &.push-#{$size}#{$i} {
    left: $perc;
  }
}

.container {
  outline: 2px solid red;
  background-color: #ccc;
  margin: 0 auto;
  max-width: calc(100% - 60px);
  width: 100%;

  @include mq($from: medium) {
    outline: 2px solid blue;
    max-width: calc(100% - 120px);
  }
}

.container-content {
  background-color: #f2f2f2;
  margin: 0 auto;
  max-width: 960px;
  width: 100%;
}


.col .row {
  margin-left: (-1 * $GUTTER_WIDTH / 2);
  margin-right: (-1 * $GUTTER_WIDTH / 2);
}

.section {
  padding-bottom: 1rem;
  padding-top: 1rem;

  &.no-padding {
    padding: 0;
  }

  &.no-padding-bottom {
    padding-bottom: 0;
  }

  &.no-padding-top {
    padding-top: 0;
  }
}

.row {
  margin-left: auto;
  margin-right: auto;

  &.no-margin {
    margin: 0;
  }

  &.no-margin-bottom {
    margin-bottom: 0;
  }

  &.no-margin-top {
    margin-top: 0;
  }

  &::after {
    clear: both;
    content: '';
    display: table;
  }

  .col {
    box-sizing: border-box;
    float: left;
    min-height: 1px;
    padding: 0 $GUTTER_WIDTH / 2;

    &[class*=push-],
    &[class*=pull-] {
      position: relative;
    }

    $i: 1;

    @while $i <= $NUM_COLS {
      $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

      &.s#{$i} {
        @include reset-offset;
        width: $perc;
      }
      $i: $i + 1;
    }

    $i: 1;

    @while $i <= $NUM_COLS {
      $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
      @include grid-classes('s', $i, $perc);
      $i: $i + 1;
    }

    @include mq($from: medium) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.m#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('m', $i, $perc);
        $i: $i + 1;
      }
    }

    @include mq($from: large) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.l#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('l', $i, $perc);
        $i: $i + 1;
      }
    }

    @include mq($from:wide) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.xl#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('xl', $i, $perc);
        $i: $i + 1;
      }
    }
  }
}
